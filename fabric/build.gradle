plugins {
    id 'fabric-loom' version '1.3-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
    id 'net.darkhax.curseforgegradle' version '1.0.14'
    id "com.modrinth.minotaur" version "2.+"
}

group = mod_group
archivesBaseName = "${mod_id}-fabric-${minecraft_version}"
version = mod_version

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation project(":shared")
    implementation project(":shared-bridge")

    compileOnly "org.jetbrains:annotations:22.0.0"

    modCompileOnly "mezz.jei:jei-$jei_minecraft_version-fabric-api:$jei_version"
    if (jei_minecraft_version == minecraft_version) {
        modRuntimeOnly "mezz.jei:jei-$jei_minecraft_version-fabric:$jei_version"
    }

    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api:$rei_version") {
        transitive = false
    }

    modCompileOnly "curse.maven:jade-324717:$jade_forge_version"
    modCompileOnly "mcp.mobius.waila:wthit-api:mojmap-$wthit_version"
}

apply from: 'dependencies.gradle'

loom {
    runs {
        client {
            client()
            setConfigName("fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
        data {
            inherit client
            setConfigName("fabric Data")
            ideConfigGenerated(true)
            runDir("build/datagen")

            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${project(":shared").file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs 'src/generated/resources'
        }
    }
}

processResources {
    from project(":shared").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    source(project(":shared").sourceSets.main.allSource)
    source(project(":shared-bridge").sourceSets.main.allSource)
}

jar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${mod_id}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = mod_id + "-fabric"
            version = project.version + (!project.version.endsWith("SNAPSHOT") ? "+" + minecraft_version : "")

            from components.java
        }
    }

    repositories {
        maven {
            var releasesRepoUrl = "https://maven.twelveiterations.com/repository/maven-releases/"
            var snapshotsRepoUrl = "https://maven.twelveiterations.com/repository/maven-snapshots/"
            url = uri(version.toString().endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl)
            name = "twelveIterationsNexus"
            credentials(PasswordCredentials)
        }
    }
}

task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    dependsOn('build')
    description = 'Publishes the Fabric build to CurseForge.'
    group = 'publishing'

    apiToken = project.findProperty("curseforge.api_key") ?: System.getenv("CURSEFORGE_TOKEN") ?: "none"

    def mainFile = upload(curseforge_fabric_project_id, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
    mainFile.changelog = rootProject.file('CHANGELOG.md').text
    mainFile.addRequirement("fabric-api")
    project.minecraft_versions.split(',').toList().each { mainFile.addGameVersion(it) }
    mainFile.releaseType = "release"
}

modrinth {
    token = project.findProperty("modrinth.token") ?: System.getenv("MODRINTH_TOKEN") ?: "none"
    projectId = project.modrinth_fabric_project_id
    versionType = project.modrinth_release_type
    versionNumber = project.version + "+fabric-" + project.minecraft_version
    uploadFile = remapJar
    changelog = rootProject.file("CHANGELOG.md").text
    gameVersions = project.minecraft_versions.split(',').toList()
    syncBodyFrom = rootProject.file("modrinth.md").text
    loaders = ['fabric']
    dependencies {
        required.project "fabric-api"
    }
}